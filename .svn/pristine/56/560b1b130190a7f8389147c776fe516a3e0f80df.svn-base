//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DMS_WindowsService.E_Archival_DMS_ThickClient_Service {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UploadFile", Namespace="http://schemas.datacontract.org/2004/07/E_Archival_DMS_ThickClient_Service")]
    [System.SerializableAttribute()]
    public partial class UploadFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActualFileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DMS_WindowsService.E_Archival_DMS_ThickClient_Service.UploadForms[] ControlsListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DMSDocIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DepartmentNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileContentTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FilePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> MainDocIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Param1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PreviewFileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UploadParamIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isDownloadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isMoveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isPreviewField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int selDeptField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long selDocTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int selSubDeptField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActualFileName {
            get {
                return this.ActualFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ActualFileNameField, value) != true)) {
                    this.ActualFileNameField = value;
                    this.RaisePropertyChanged("ActualFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DMS_WindowsService.E_Archival_DMS_ThickClient_Service.UploadForms[] ControlsList {
            get {
                return this.ControlsListField;
            }
            set {
                if ((object.ReferenceEquals(this.ControlsListField, value) != true)) {
                    this.ControlsListField = value;
                    this.RaisePropertyChanged("ControlsList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DMSDocID {
            get {
                return this.DMSDocIDField;
            }
            set {
                if ((this.DMSDocIDField.Equals(value) != true)) {
                    this.DMSDocIDField = value;
                    this.RaisePropertyChanged("DMSDocID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DepartmentName {
            get {
                return this.DepartmentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartmentNameField, value) != true)) {
                    this.DepartmentNameField = value;
                    this.RaisePropertyChanged("DepartmentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentType {
            get {
                return this.DocumentTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentTypeField, value) != true)) {
                    this.DocumentTypeField = value;
                    this.RaisePropertyChanged("DocumentType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileContentType {
            get {
                return this.FileContentTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.FileContentTypeField, value) != true)) {
                    this.FileContentTypeField = value;
                    this.RaisePropertyChanged("FileContentType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FilePath {
            get {
                return this.FilePathField;
            }
            set {
                if ((object.ReferenceEquals(this.FilePathField, value) != true)) {
                    this.FilePathField = value;
                    this.RaisePropertyChanged("FilePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileSize {
            get {
                return this.FileSizeField;
            }
            set {
                if ((object.ReferenceEquals(this.FileSizeField, value) != true)) {
                    this.FileSizeField = value;
                    this.RaisePropertyChanged("FileSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> MainDocID {
            get {
                return this.MainDocIDField;
            }
            set {
                if ((this.MainDocIDField.Equals(value) != true)) {
                    this.MainDocIDField = value;
                    this.RaisePropertyChanged("MainDocID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Param1 {
            get {
                return this.Param1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Param1Field, value) != true)) {
                    this.Param1Field = value;
                    this.RaisePropertyChanged("Param1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PreviewFileName {
            get {
                return this.PreviewFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PreviewFileNameField, value) != true)) {
                    this.PreviewFileNameField = value;
                    this.RaisePropertyChanged("PreviewFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UploadParamID {
            get {
                return this.UploadParamIDField;
            }
            set {
                if ((this.UploadParamIDField.Equals(value) != true)) {
                    this.UploadParamIDField = value;
                    this.RaisePropertyChanged("UploadParamID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isDownload {
            get {
                return this.isDownloadField;
            }
            set {
                if ((this.isDownloadField.Equals(value) != true)) {
                    this.isDownloadField = value;
                    this.RaisePropertyChanged("isDownload");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isMove {
            get {
                return this.isMoveField;
            }
            set {
                if ((this.isMoveField.Equals(value) != true)) {
                    this.isMoveField = value;
                    this.RaisePropertyChanged("isMove");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isPreview {
            get {
                return this.isPreviewField;
            }
            set {
                if ((this.isPreviewField.Equals(value) != true)) {
                    this.isPreviewField = value;
                    this.RaisePropertyChanged("isPreview");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int selDept {
            get {
                return this.selDeptField;
            }
            set {
                if ((this.selDeptField.Equals(value) != true)) {
                    this.selDeptField = value;
                    this.RaisePropertyChanged("selDept");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long selDocType {
            get {
                return this.selDocTypeField;
            }
            set {
                if ((this.selDocTypeField.Equals(value) != true)) {
                    this.selDocTypeField = value;
                    this.RaisePropertyChanged("selDocType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int selSubDept {
            get {
                return this.selSubDeptField;
            }
            set {
                if ((this.selSubDeptField.Equals(value) != true)) {
                    this.selSubDeptField = value;
                    this.RaisePropertyChanged("selSubDept");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UploadForms", Namespace="http://schemas.datacontract.org/2004/07/E_Archival_DMS_ThickClient_Service")]
    [System.SerializableAttribute()]
    public partial class UploadForms : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string displayTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isMandatoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string valueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string displayText {
            get {
                return this.displayTextField;
            }
            set {
                if ((object.ReferenceEquals(this.displayTextField, value) != true)) {
                    this.displayTextField = value;
                    this.RaisePropertyChanged("displayText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isMandatory {
            get {
                return this.isMandatoryField;
            }
            set {
                if ((this.isMandatoryField.Equals(value) != true)) {
                    this.isMandatoryField = value;
                    this.RaisePropertyChanged("isMandatory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string value {
            get {
                return this.valueField;
            }
            set {
                if ((object.ReferenceEquals(this.valueField, value) != true)) {
                    this.valueField = value;
                    this.RaisePropertyChanged("value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="E_Archival_DMS_ThickClient_Service.IThickClientService")]
    public interface IThickClientService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/Login", ReplyAction="http://tempuri.org/IThickClientService/LoginResponse")]
        int Login(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/Login", ReplyAction="http://tempuri.org/IThickClientService/LoginResponse")]
        System.Threading.Tasks.Task<int> LoginAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/GetDepartments", ReplyAction="http://tempuri.org/IThickClientService/GetDepartmentsResponse")]
        System.Data.DataTable GetDepartments(ulong departmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/GetDepartments", ReplyAction="http://tempuri.org/IThickClientService/GetDepartmentsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetDepartmentsAsync(ulong departmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/GetSubDepartments", ReplyAction="http://tempuri.org/IThickClientService/GetSubDepartmentsResponse")]
        System.Data.DataTable GetSubDepartments(long departmentId, long subDepartmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/GetSubDepartments", ReplyAction="http://tempuri.org/IThickClientService/GetSubDepartmentsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetSubDepartmentsAsync(long departmentId, long subDepartmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/GetDocumentType", ReplyAction="http://tempuri.org/IThickClientService/GetDocumentTypeResponse")]
        System.Data.DataTable GetDocumentType(long subDepartmentID, long docTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/GetDocumentType", ReplyAction="http://tempuri.org/IThickClientService/GetDocumentTypeResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetDocumentTypeAsync(long subDepartmentID, long docTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/GetDocumentDetails", ReplyAction="http://tempuri.org/IThickClientService/GetDocumentDetailsResponse")]
        System.Data.DataSet GetDocumentDetails(long docTypeId, long departMentId, long subDepartMentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/GetDocumentDetails", ReplyAction="http://tempuri.org/IThickClientService/GetDocumentDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDocumentDetailsAsync(long docTypeId, long departMentId, long subDepartMentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/GetColumns", ReplyAction="http://tempuri.org/IThickClientService/GetColumnsResponse")]
        System.Data.DataTable GetColumns(string departmentName, string subDocumentName, string docType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/GetColumns", ReplyAction="http://tempuri.org/IThickClientService/GetColumnsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetColumnsAsync(string departmentName, string subDocumentName, string docType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/GetMandatoryColumns", ReplyAction="http://tempuri.org/IThickClientService/GetMandatoryColumnsResponse")]
        System.Data.DataTable GetMandatoryColumns(string departmentName, string subDocumentName, string docType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/GetMandatoryColumns", ReplyAction="http://tempuri.org/IThickClientService/GetMandatoryColumnsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetMandatoryColumnsAsync(string departmentName, string subDocumentName, string docType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/AddMetadata", ReplyAction="http://tempuri.org/IThickClientService/AddMetadataResponse")]
        System.Data.DataTable AddMetadata(System.Data.DataTable dataTable, DMS_WindowsService.E_Archival_DMS_ThickClient_Service.UploadFile uploadFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/AddMetadata", ReplyAction="http://tempuri.org/IThickClientService/AddMetadataResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> AddMetadataAsync(System.Data.DataTable dataTable, DMS_WindowsService.E_Archival_DMS_ThickClient_Service.UploadFile uploadFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/UpdateDMSDocumentID", ReplyAction="http://tempuri.org/IThickClientService/UpdateDMSDocumentIDResponse")]
        void UpdateDMSDocumentID(int docID, int DMSDocID, int PreviewDMSDOCID, string PreviewDMSDOCName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/UpdateDMSDocumentID", ReplyAction="http://tempuri.org/IThickClientService/UpdateDMSDocumentIDResponse")]
        System.Threading.Tasks.Task UpdateDMSDocumentIDAsync(int docID, int DMSDocID, int PreviewDMSDOCID, string PreviewDMSDOCName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/GetDocTtypeId", ReplyAction="http://tempuri.org/IThickClientService/GetDocTtypeIdResponse")]
        long GetDocTtypeId(string departmentName, string subDocumentName, string docType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/GetDocTtypeId", ReplyAction="http://tempuri.org/IThickClientService/GetDocTtypeIdResponse")]
        System.Threading.Tasks.Task<long> GetDocTtypeIdAsync(string departmentName, string subDocumentName, string docType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/GetDMSDocToUpload", ReplyAction="http://tempuri.org/IThickClientService/GetDMSDocToUploadResponse")]
        System.Data.DataTable GetDMSDocToUpload();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/GetDMSDocToUpload", ReplyAction="http://tempuri.org/IThickClientService/GetDMSDocToUploadResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetDMSDocToUploadAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/AddUpdateDMSDocumentDetails", ReplyAction="http://tempuri.org/IThickClientService/AddUpdateDMSDocumentDetailsResponse")]
        System.Data.DataTable AddUpdateDMSDocumentDetails(DMS_WindowsService.E_Archival_DMS_ThickClient_Service.UploadFile uploadFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/AddUpdateDMSDocumentDetails", ReplyAction="http://tempuri.org/IThickClientService/AddUpdateDMSDocumentDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> AddUpdateDMSDocumentDetailsAsync(DMS_WindowsService.E_Archival_DMS_ThickClient_Service.UploadFile uploadFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/GetDMSDocumentDetails", ReplyAction="http://tempuri.org/IThickClientService/GetDMSDocumentDetailsResponse")]
        System.Data.DataTable GetDMSDocumentDetails(int uploadedDocumentID, string DocTypeDMS);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/GetDMSDocumentDetails", ReplyAction="http://tempuri.org/IThickClientService/GetDMSDocumentDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetDMSDocumentDetailsAsync(int uploadedDocumentID, string DocTypeDMS);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/Master_Config", ReplyAction="http://tempuri.org/IThickClientService/Master_ConfigResponse")]
        System.Data.DataTable Master_Config(string Key, bool GetAllConfig);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThickClientService/Master_Config", ReplyAction="http://tempuri.org/IThickClientService/Master_ConfigResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> Master_ConfigAsync(string Key, bool GetAllConfig);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IThickClientServiceChannel : DMS_WindowsService.E_Archival_DMS_ThickClient_Service.IThickClientService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ThickClientServiceClient : System.ServiceModel.ClientBase<DMS_WindowsService.E_Archival_DMS_ThickClient_Service.IThickClientService>, DMS_WindowsService.E_Archival_DMS_ThickClient_Service.IThickClientService {
        
        public ThickClientServiceClient() {
        }
        
        public ThickClientServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ThickClientServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ThickClientServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ThickClientServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Login(string userName, string password) {
            return base.Channel.Login(userName, password);
        }
        
        public System.Threading.Tasks.Task<int> LoginAsync(string userName, string password) {
            return base.Channel.LoginAsync(userName, password);
        }
        
        public System.Data.DataTable GetDepartments(ulong departmentId) {
            return base.Channel.GetDepartments(departmentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetDepartmentsAsync(ulong departmentId) {
            return base.Channel.GetDepartmentsAsync(departmentId);
        }
        
        public System.Data.DataTable GetSubDepartments(long departmentId, long subDepartmentId) {
            return base.Channel.GetSubDepartments(departmentId, subDepartmentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetSubDepartmentsAsync(long departmentId, long subDepartmentId) {
            return base.Channel.GetSubDepartmentsAsync(departmentId, subDepartmentId);
        }
        
        public System.Data.DataTable GetDocumentType(long subDepartmentID, long docTypeId) {
            return base.Channel.GetDocumentType(subDepartmentID, docTypeId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetDocumentTypeAsync(long subDepartmentID, long docTypeId) {
            return base.Channel.GetDocumentTypeAsync(subDepartmentID, docTypeId);
        }
        
        public System.Data.DataSet GetDocumentDetails(long docTypeId, long departMentId, long subDepartMentId) {
            return base.Channel.GetDocumentDetails(docTypeId, departMentId, subDepartMentId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDocumentDetailsAsync(long docTypeId, long departMentId, long subDepartMentId) {
            return base.Channel.GetDocumentDetailsAsync(docTypeId, departMentId, subDepartMentId);
        }
        
        public System.Data.DataTable GetColumns(string departmentName, string subDocumentName, string docType) {
            return base.Channel.GetColumns(departmentName, subDocumentName, docType);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetColumnsAsync(string departmentName, string subDocumentName, string docType) {
            return base.Channel.GetColumnsAsync(departmentName, subDocumentName, docType);
        }
        
        public System.Data.DataTable GetMandatoryColumns(string departmentName, string subDocumentName, string docType) {
            return base.Channel.GetMandatoryColumns(departmentName, subDocumentName, docType);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetMandatoryColumnsAsync(string departmentName, string subDocumentName, string docType) {
            return base.Channel.GetMandatoryColumnsAsync(departmentName, subDocumentName, docType);
        }
        
        public System.Data.DataTable AddMetadata(System.Data.DataTable dataTable, DMS_WindowsService.E_Archival_DMS_ThickClient_Service.UploadFile uploadFile) {
            return base.Channel.AddMetadata(dataTable, uploadFile);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> AddMetadataAsync(System.Data.DataTable dataTable, DMS_WindowsService.E_Archival_DMS_ThickClient_Service.UploadFile uploadFile) {
            return base.Channel.AddMetadataAsync(dataTable, uploadFile);
        }
        
        public void UpdateDMSDocumentID(int docID, int DMSDocID, int PreviewDMSDOCID, string PreviewDMSDOCName) {
            base.Channel.UpdateDMSDocumentID(docID, DMSDocID, PreviewDMSDOCID, PreviewDMSDOCName);
        }
        
        public System.Threading.Tasks.Task UpdateDMSDocumentIDAsync(int docID, int DMSDocID, int PreviewDMSDOCID, string PreviewDMSDOCName) {
            return base.Channel.UpdateDMSDocumentIDAsync(docID, DMSDocID, PreviewDMSDOCID, PreviewDMSDOCName);
        }
        
        public long GetDocTtypeId(string departmentName, string subDocumentName, string docType) {
            return base.Channel.GetDocTtypeId(departmentName, subDocumentName, docType);
        }
        
        public System.Threading.Tasks.Task<long> GetDocTtypeIdAsync(string departmentName, string subDocumentName, string docType) {
            return base.Channel.GetDocTtypeIdAsync(departmentName, subDocumentName, docType);
        }
        
        public System.Data.DataTable GetDMSDocToUpload() {
            return base.Channel.GetDMSDocToUpload();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetDMSDocToUploadAsync() {
            return base.Channel.GetDMSDocToUploadAsync();
        }
        
        public System.Data.DataTable AddUpdateDMSDocumentDetails(DMS_WindowsService.E_Archival_DMS_ThickClient_Service.UploadFile uploadFile) {
            return base.Channel.AddUpdateDMSDocumentDetails(uploadFile);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> AddUpdateDMSDocumentDetailsAsync(DMS_WindowsService.E_Archival_DMS_ThickClient_Service.UploadFile uploadFile) {
            return base.Channel.AddUpdateDMSDocumentDetailsAsync(uploadFile);
        }
        
        public System.Data.DataTable GetDMSDocumentDetails(int uploadedDocumentID, string DocTypeDMS) {
            return base.Channel.GetDMSDocumentDetails(uploadedDocumentID, DocTypeDMS);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetDMSDocumentDetailsAsync(int uploadedDocumentID, string DocTypeDMS) {
            return base.Channel.GetDMSDocumentDetailsAsync(uploadedDocumentID, DocTypeDMS);
        }
        
        public System.Data.DataTable Master_Config(string Key, bool GetAllConfig) {
            return base.Channel.Master_Config(Key, GetAllConfig);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> Master_ConfigAsync(string Key, bool GetAllConfig) {
            return base.Channel.Master_ConfigAsync(Key, GetAllConfig);
        }
    }
}
